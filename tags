!_TAG_EXTRA_DESCRIPTION	anonymous	/Include tags for non-named objects like lambda/
!_TAG_EXTRA_DESCRIPTION	fileScope	/Include tags of file scope/
!_TAG_EXTRA_DESCRIPTION	pseudo	/Include pseudo tags/
!_TAG_EXTRA_DESCRIPTION	subparser	/Include tags generated by subparsers/
!_TAG_FIELD_DESCRIPTION	epoch	/the last modified time of the input file (only for F\/file kind tag)/
!_TAG_FIELD_DESCRIPTION	file	/File-restricted scoping/
!_TAG_FIELD_DESCRIPTION	input	/input file/
!_TAG_FIELD_DESCRIPTION	name	/tag name/
!_TAG_FIELD_DESCRIPTION	pattern	/pattern/
!_TAG_FIELD_DESCRIPTION	typeref	/Type and name of a variable or typedef/
!_TAG_FIELD_DESCRIPTION!Go	package	/the real package specified by the package name/
!_TAG_FIELD_DESCRIPTION!Go	packageName	/the name for referring the package/
!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_KIND_DESCRIPTION!DTD	E,entity	/entities/
!_TAG_KIND_DESCRIPTION!DTD	a,attribute	/attributes/
!_TAG_KIND_DESCRIPTION!DTD	e,element	/elements/
!_TAG_KIND_DESCRIPTION!DTD	n,notation	/notations/
!_TAG_KIND_DESCRIPTION!DTD	p,parameterEntity	/parameter entities/
!_TAG_KIND_DESCRIPTION!Go	M,anonMember	/struct anonymous members/
!_TAG_KIND_DESCRIPTION!Go	P,packageName	/name for specifying imported package/
!_TAG_KIND_DESCRIPTION!Go	Y,unknown	/unknown/
!_TAG_KIND_DESCRIPTION!Go	a,talias	/type aliases/
!_TAG_KIND_DESCRIPTION!Go	c,const	/constants/
!_TAG_KIND_DESCRIPTION!Go	f,func	/functions/
!_TAG_KIND_DESCRIPTION!Go	i,interface	/interfaces/
!_TAG_KIND_DESCRIPTION!Go	m,member	/struct members/
!_TAG_KIND_DESCRIPTION!Go	n,methodSpec	/interface method specification/
!_TAG_KIND_DESCRIPTION!Go	p,package	/packages/
!_TAG_KIND_DESCRIPTION!Go	s,struct	/structs/
!_TAG_KIND_DESCRIPTION!Go	t,type	/types/
!_TAG_KIND_DESCRIPTION!Go	v,var	/variables/
!_TAG_KIND_DESCRIPTION!JSON	a,array	/arrays/
!_TAG_KIND_DESCRIPTION!JSON	b,boolean	/booleans/
!_TAG_KIND_DESCRIPTION!JSON	n,number	/numbers/
!_TAG_KIND_DESCRIPTION!JSON	o,object	/objects/
!_TAG_KIND_DESCRIPTION!JSON	s,string	/strings/
!_TAG_KIND_DESCRIPTION!JSON	z,null	/nulls/
!_TAG_KIND_DESCRIPTION!Make	I,makefile	/makefiles/
!_TAG_KIND_DESCRIPTION!Make	m,macro	/macros/
!_TAG_KIND_DESCRIPTION!Make	t,target	/targets/
!_TAG_KIND_DESCRIPTION!Markdown	S,subsection	/level 2 sections/
!_TAG_KIND_DESCRIPTION!Markdown	T,l4subsection	/level 4 sections/
!_TAG_KIND_DESCRIPTION!Markdown	c,chapter	/chapters/
!_TAG_KIND_DESCRIPTION!Markdown	h,hashtag	/hashtags/
!_TAG_KIND_DESCRIPTION!Markdown	n,footnote	/footnotes/
!_TAG_KIND_DESCRIPTION!Markdown	s,section	/sections/
!_TAG_KIND_DESCRIPTION!Markdown	t,subsubsection	/level 3 sections/
!_TAG_KIND_DESCRIPTION!Markdown	u,l5subsection	/level 5 sections/
!_TAG_KIND_DESCRIPTION!Yaml	a,anchor	/anchors/
!_TAG_OUTPUT_EXCMD	mixed	/number, pattern, mixed, or combineV2/
!_TAG_OUTPUT_FILESEP	slash	/slash or backslash/
!_TAG_OUTPUT_MODE	u-ctags	/u-ctags or e-ctags/
!_TAG_OUTPUT_VERSION	0.0	/current.age/
!_TAG_PARSER_VERSION!DTD	0.0	/current.age/
!_TAG_PARSER_VERSION!Go	0.0	/current.age/
!_TAG_PARSER_VERSION!JSON	0.0	/current.age/
!_TAG_PARSER_VERSION!Make	0.0	/current.age/
!_TAG_PARSER_VERSION!Markdown	1.1	/current.age/
!_TAG_PARSER_VERSION!Yaml	0.0	/current.age/
!_TAG_PATTERN_LENGTH_LIMIT	96	/0 for no limit/
!_TAG_PROC_CWD	/home/bf/workspace/git/github/bfoersterling/gotracer/	//
!_TAG_PROGRAM_AUTHOR	Universal Ctags Team	//
!_TAG_PROGRAM_NAME	Universal Ctags	/Derived from Exuberant Ctags/
!_TAG_PROGRAM_URL	https://ctags.io/	/official site/
!_TAG_PROGRAM_VERSION	6.1.0	/v6.1.0/
!_TAG_ROLE_DESCRIPTION!DTD!element	attOwner	/attributes owner/
!_TAG_ROLE_DESCRIPTION!DTD!parameterEntity	condition	/conditions/
!_TAG_ROLE_DESCRIPTION!DTD!parameterEntity	elementName	/element names/
!_TAG_ROLE_DESCRIPTION!DTD!parameterEntity	partOfAttDef	/part of attribute definition/
!_TAG_ROLE_DESCRIPTION!Go!package	imported	/imported package/
!_TAG_ROLE_DESCRIPTION!Go!unknown	receiverType	/receiver type/
!_TAG_ROLE_DESCRIPTION!Make!makefile	included	/included/
!_TAG_ROLE_DESCRIPTION!Make!makefile	optional	/optionally included/
!_TAG_ROLE_DESCRIPTION!Yaml!anchor	alias	/alias/
.End()	docs/funcdecl.md	/^#### .End()$/;"	t	section:ast.FuncDecl
.Name.End()	docs/funcdecl.md	/^#### .Name.End()$/;"	t	section:ast.FuncDecl
.Name.Pos()	docs/funcdecl.md	/^#### .Name.Pos()$/;"	t	section:ast.FuncDecl
.Pos()	docs/funcdecl.md	/^#### .Pos()$/;"	t	section:ast.FuncDecl
.Type.End()	docs/funcdecl.md	/^#### .Type.End()$/;"	t	section:ast.FuncDecl
0	dist/artifacts.json	/^[{"name":"metadata.json","path":"dist\/metadata.json","internal_type":30,"type":"Metadata"},{"na/;"	o
0	dist/artifacts.json	/^[{"name":"metadata.json","path":"dist\/metadata.json","internal_type":30,"type":"Metadata"},{"na/;"	s	array:4.extra.Binaries
0	dist/artifacts.json	/^[{"name":"metadata.json","path":"dist\/metadata.json","internal_type":30,"type":"Metadata"},{"na/;"	s	array:5.extra.Binaries
0	dist/artifacts.json	/^[{"name":"metadata.json","path":"dist\/metadata.json","internal_type":30,"type":"Metadata"},{"na/;"	s	array:6.extra.Binaries
0. Definitions.	LICENSE.md	/^### 0. Definitions.$/;"	S	section:GNU GENERAL PUBLIC LICENSE""TERMS AND CONDITIONS
1	dist/artifacts.json	/^[{"name":"metadata.json","path":"dist\/metadata.json","internal_type":30,"type":"Metadata"},{"na/;"	o
1. Source Code.	LICENSE.md	/^### 1. Source Code.$/;"	S	section:GNU GENERAL PUBLIC LICENSE""TERMS AND CONDITIONS
10. Automatic Licensing of Downstream Recipients.	LICENSE.md	/^### 10. Automatic Licensing of Downstream Recipients.$/;"	S	section:GNU GENERAL PUBLIC LICENSE""TERMS AND CONDITIONS
11. Patents.	LICENSE.md	/^### 11. Patents.$/;"	S	section:GNU GENERAL PUBLIC LICENSE""TERMS AND CONDITIONS
12. No Surrender of Others' Freedom.	LICENSE.md	/^### 12. No Surrender of Others' Freedom.$/;"	S	section:GNU GENERAL PUBLIC LICENSE""TERMS AND CONDITIONS
13. Use with the GNU Affero General Public License.	LICENSE.md	/^### 13. Use with the GNU Affero General Public License.$/;"	S	section:GNU GENERAL PUBLIC LICENSE""TERMS AND CONDITIONS
14. Revised Versions of this License.	LICENSE.md	/^### 14. Revised Versions of this License.$/;"	S	section:GNU GENERAL PUBLIC LICENSE""TERMS AND CONDITIONS
15. Disclaimer of Warranty.	LICENSE.md	/^### 15. Disclaimer of Warranty.$/;"	S	section:GNU GENERAL PUBLIC LICENSE""TERMS AND CONDITIONS
16. Limitation of Liability.	LICENSE.md	/^### 16. Limitation of Liability.$/;"	S	section:GNU GENERAL PUBLIC LICENSE""TERMS AND CONDITIONS
17. Interpretation of Sections 15 and 16.	LICENSE.md	/^### 17. Interpretation of Sections 15 and 16.$/;"	S	section:GNU GENERAL PUBLIC LICENSE""TERMS AND CONDITIONS
2	dist/artifacts.json	/^[{"name":"metadata.json","path":"dist\/metadata.json","internal_type":30,"type":"Metadata"},{"na/;"	o
2. Basic Permissions.	LICENSE.md	/^### 2. Basic Permissions.$/;"	S	section:GNU GENERAL PUBLIC LICENSE""TERMS AND CONDITIONS
2025-01-11	docs/benchmarks.md	/^#### 2025-01-11$/;"	t
3	dist/artifacts.json	/^[{"name":"metadata.json","path":"dist\/metadata.json","internal_type":30,"type":"Metadata"},{"na/;"	o
3. Protecting Users' Legal Rights From Anti-Circumvention Law.	LICENSE.md	/^### 3. Protecting Users' Legal Rights From Anti-Circumvention Law.$/;"	S	section:GNU GENERAL PUBLIC LICENSE""TERMS AND CONDITIONS
4	dist/artifacts.json	/^[{"name":"metadata.json","path":"dist\/metadata.json","internal_type":30,"type":"Metadata"},{"na/;"	o
4. Conveying Verbatim Copies.	LICENSE.md	/^### 4. Conveying Verbatim Copies.$/;"	S	section:GNU GENERAL PUBLIC LICENSE""TERMS AND CONDITIONS
5	dist/artifacts.json	/^[{"name":"metadata.json","path":"dist\/metadata.json","internal_type":30,"type":"Metadata"},{"na/;"	o
5. Conveying Modified Source Versions.	LICENSE.md	/^### 5. Conveying Modified Source Versions.$/;"	S	section:GNU GENERAL PUBLIC LICENSE""TERMS AND CONDITIONS
6	dist/artifacts.json	/^[{"name":"metadata.json","path":"dist\/metadata.json","internal_type":30,"type":"Metadata"},{"na/;"	o
6. Conveying Non-Source Forms.	LICENSE.md	/^### 6. Conveying Non-Source Forms.$/;"	S	section:GNU GENERAL PUBLIC LICENSE""TERMS AND CONDITIONS
7	dist/artifacts.json	/^[{"name":"metadata.json","path":"dist\/metadata.json","internal_type":30,"type":"Metadata"},{"na/;"	o
7. Additional Terms.	LICENSE.md	/^### 7. Additional Terms.$/;"	S	section:GNU GENERAL PUBLIC LICENSE""TERMS AND CONDITIONS
8. Termination.	LICENSE.md	/^### 8. Termination.$/;"	S	section:GNU GENERAL PUBLIC LICENSE""TERMS AND CONDITIONS
9. Acceptance Not Required for Having Copies.	LICENSE.md	/^### 9. Acceptance Not Required for Having Copies.$/;"	S	section:GNU GENERAL PUBLIC LICENSE""TERMS AND CONDITIONS
BINARY	Makefile	/^BINARY=gotracer$/;"	m
Benchmark_new_func_center	func_center_test.go	/^func Benchmark_new_func_center(b *testing.B) {$/;"	f	package:main
Binaries	dist/artifacts.json	/^[{"name":"metadata.json","path":"dist\/metadata.json","internal_type":30,"type":"Metadata"},{"na/;"	a	object:4.extra
Binaries	dist/artifacts.json	/^[{"name":"metadata.json","path":"dist\/metadata.json","internal_type":30,"type":"Metadata"},{"na/;"	a	object:5.extra
Binaries	dist/artifacts.json	/^[{"name":"metadata.json","path":"dist\/metadata.json","internal_type":30,"type":"Metadata"},{"na/;"	a	object:6.extra
Binary	dist/artifacts.json	/^[{"name":"metadata.json","path":"dist\/metadata.json","internal_type":30,"type":"Metadata"},{"na/;"	s	object:1.extra
Binary	dist/artifacts.json	/^[{"name":"metadata.json","path":"dist\/metadata.json","internal_type":30,"type":"Metadata"},{"na/;"	s	object:2.extra
Binary	dist/artifacts.json	/^[{"name":"metadata.json","path":"dist\/metadata.json","internal_type":30,"type":"Metadata"},{"na/;"	s	object:3.extra
Can The Entrypoint Be a Method?	docs/entrypoint.md	/^#### Can The Entrypoint Be a Method?$/;"	t
Changelog	dist/CHANGELOG.md	/^## Changelog$/;"	s
Checksum	dist/artifacts.json	/^[{"name":"metadata.json","path":"dist\/metadata.json","internal_type":30,"type":"Metadata"},{"na/;"	s	object:4.extra
Checksum	dist/artifacts.json	/^[{"name":"metadata.json","path":"dist\/metadata.json","internal_type":30,"type":"Metadata"},{"na/;"	s	object:5.extra
Checksum	dist/artifacts.json	/^[{"name":"metadata.json","path":"dist\/metadata.json","internal_type":30,"type":"Metadata"},{"na/;"	s	object:6.extra
End()	docs/callexpr.md	/^#### End()$/;"	t	section:ast.CallExpr
Entrypoint As CLI Argument	docs/entrypoint.md	/^#### Entrypoint As CLI Argument$/;"	t
Ext	dist/artifacts.json	/^[{"name":"metadata.json","path":"dist\/metadata.json","internal_type":30,"type":"Metadata"},{"na/;"	s	object:1.extra
Ext	dist/artifacts.json	/^[{"name":"metadata.json","path":"dist\/metadata.json","internal_type":30,"type":"Metadata"},{"na/;"	s	object:2.extra
Ext	dist/artifacts.json	/^[{"name":"metadata.json","path":"dist\/metadata.json","internal_type":30,"type":"Metadata"},{"na/;"	s	object:3.extra
Format	dist/artifacts.json	/^[{"name":"metadata.json","path":"dist\/metadata.json","internal_type":30,"type":"Metadata"},{"na/;"	s	object:4.extra
Format	dist/artifacts.json	/^[{"name":"metadata.json","path":"dist\/metadata.json","internal_type":30,"type":"Metadata"},{"na/;"	s	object:5.extra
Format	dist/artifacts.json	/^[{"name":"metadata.json","path":"dist\/metadata.json","internal_type":30,"type":"Metadata"},{"na/;"	s	object:6.extra
Fun.End()	docs/callexpr.md	/^#### Fun.End()$/;"	t	section:ast.CallExpr.Fun
Fun.Pos()	docs/callexpr.md	/^#### Fun.Pos()$/;"	t	section:ast.CallExpr.Fun
GNU GENERAL PUBLIC LICENSE	LICENSE.md	/^# GNU GENERAL PUBLIC LICENSE$/;"	c
General Map Overview	docs/types_info.md	/^#### General Map Overview$/;"	t	section:types.Info.Uses Map
How to Apply These Terms to Your New Programs	LICENSE.md	/^## How to Apply These Terms to Your New Programs$/;"	s	chapter:GNU GENERAL PUBLIC LICENSE
ID	dist/artifacts.json	/^[{"name":"metadata.json","path":"dist\/metadata.json","internal_type":30,"type":"Metadata"},{"na/;"	s	object:1.extra
ID	dist/artifacts.json	/^[{"name":"metadata.json","path":"dist\/metadata.json","internal_type":30,"type":"Metadata"},{"na/;"	s	object:2.extra
ID	dist/artifacts.json	/^[{"name":"metadata.json","path":"dist\/metadata.json","internal_type":30,"type":"Metadata"},{"na/;"	s	object:3.extra
ID	dist/artifacts.json	/^[{"name":"metadata.json","path":"dist\/metadata.json","internal_type":30,"type":"Metadata"},{"na/;"	s	object:4.extra
ID	dist/artifacts.json	/^[{"name":"metadata.json","path":"dist\/metadata.json","internal_type":30,"type":"Metadata"},{"na/;"	s	object:5.extra
ID	dist/artifacts.json	/^[{"name":"metadata.json","path":"dist\/metadata.json","internal_type":30,"type":"Metadata"},{"na/;"	s	object:6.extra
Lparen	docs/callexpr.md	/^#### Lparen$/;"	t	section:ast.CallExpr
Pos()	docs/callexpr.md	/^#### Pos()$/;"	t	section:ast.CallExpr
Preamble	LICENSE.md	/^## Preamble$/;"	s	chapter:GNU GENERAL PUBLIC LICENSE
Replaces	dist/artifacts.json	/^[{"name":"metadata.json","path":"dist\/metadata.json","internal_type":30,"type":"Metadata"},{"na/;"	z	object:4.extra
Replaces	dist/artifacts.json	/^[{"name":"metadata.json","path":"dist\/metadata.json","internal_type":30,"type":"Metadata"},{"na/;"	z	object:5.extra
Replaces	dist/artifacts.json	/^[{"name":"metadata.json","path":"dist\/metadata.json","internal_type":30,"type":"Metadata"},{"na/;"	z	object:6.extra
Rparen	docs/callexpr.md	/^#### Rparen$/;"	t	section:ast.CallExpr
Search types.Info Uses Field for Unique String	docs/entrypoint.md	/^#### Search types.Info Uses Field for Unique String$/;"	t
TERMS AND CONDITIONS	LICENSE.md	/^## TERMS AND CONDITIONS$/;"	s	chapter:GNU GENERAL PUBLIC LICENSE
TLDR	docs/callexpr.md	/^## TLDR$/;"	s
TODO	README.md	/^## TODO$/;"	s	chapter:gotracer
Test_bar	test_files/multifile/foo_test.go	/^func Test_bar(t *testing.T) {$/;"	f	package:main
Test_callexprs_to_strings	ast_conversions_test.go	/^func Test_callexprs_to_strings(t *testing.T) {$/;"	f	package:main
Test_fcall_get_calls	fcall_test.go	/^func Test_fcall_get_calls(t *testing.T) {$/;"	f	package:main
Test_get_all_fds	ast_helper_test.go	/^func Test_get_all_fds(t *testing.T) {$/;"	f	package:main
Test_get_calls	ast_conversions_test.go	/^func Test_get_calls(t *testing.T) {$/;"	f	package:main
Test_get_calls_from_afps	calls_test.go	/^func Test_get_calls_from_afps(t *testing.T) {$/;"	f	package:main
Test_get_calls_from_node	ast_conversions_test.go	/^func Test_get_calls_from_node(t *testing.T) {$/;"	f	package:main
Test_get_core	convenience_test.go	/^func Test_get_core(t *testing.T) {$/;"	f	package:main
Test_get_fcalls	func_center_test.go	/^func Test_get_fcalls(t *testing.T) {$/;"	f	package:main
Test_get_fd_from_pos	ast_conversions_test.go	/^func Test_get_fd_from_pos(t *testing.T) {$/;"	f	package:main
Test_get_fname_from_call	ast_conversions_test.go	/^func Test_get_fname_from_call(t *testing.T) {$/;"	f	package:main
Test_get_funcdecl	func_center_test.go	/^func Test_get_funcdecl(t *testing.T) {$/;"	f	package:main
Test_get_funcdecl_from_fname	ast_conversions_test.go	/^func Test_get_funcdecl_from_fname(t *testing.T) {$/;"	f	package:main
Test_get_funcdecl_from_fname_multifile	ast_conversions_test.go	/^func Test_get_funcdecl_from_fname_multifile(t *testing.T) {$/;"	f	package:main
Test_get_funcdecls_from_afs	convenience_test.go	/^func Test_get_funcdecls_from_afs(t *testing.T) {$/;"	f	package:main
Test_get_gofiles	helper_test.go	/^func Test_get_gofiles(t *testing.T) {$/;"	f	package:main
Test_get_local_calls_from_node	ast_conversions_test.go	/^func Test_get_local_calls_from_node(t *testing.T) {$/;"	f	package:main
Test_get_possible_entrypoints	entrypoints_test.go	/^func Test_get_possible_entrypoints(t *testing.T) {$/;"	f	package:main
Test_get_type_info	type_checking_test.go	/^func Test_get_type_info(t *testing.T) {$/;"	f	package:main
Test_is_funcdecl	ast_conversions_test.go	/^func Test_is_funcdecl(t *testing.T) {$/;"	f	package:main
Test_is_selectorstr	ast_helper_test.go	/^func Test_is_selectorstr(t *testing.T) {$/;"	f	package:main
Test_new_func_center	func_center_test.go	/^func Test_new_func_center(t *testing.T) {$/;"	f	package:main
Test_node_to_string	ast_helper_test.go	/^func Test_node_to_string(t *testing.T) {$/;"	f	package:main
Test_parse_dir	parsing_test.go	/^func Test_parse_dir(t *testing.T) {$/;"	f	package:main
Test_silent_calltree	tree_test.go	/^func Test_silent_calltree(t *testing.T) {$/;"	f	package:main
Test_silent_dirtree	tree_test.go	/^func Test_silent_dirtree(t *testing.T) {$/;"	f	package:main
Test_silent_filetree	tree_test.go	/^func Test_silent_filetree(t *testing.T) {$/;"	f	package:main
Test_split_selectorstr	ast_helper_test.go	/^func Test_split_selectorstr(t *testing.T) {$/;"	f	package:main
Test_string_to_ast	convenience_test.go	/^func Test_string_to_ast(t *testing.T) {$/;"	f	package:main
Test_strings_to_ast	convenience_test.go	/^func Test_strings_to_ast(t *testing.T) {$/;"	f	package:main
Test_strmap_to_afs	convenience_test.go	/^func Test_strmap_to_afs(t *testing.T) {$/;"	f	package:main
Test_strmap_to_ast	convenience_test.go	/^func Test_strmap_to_ast(t *testing.T) {$/;"	f	package:main
Type()	docs/types_object.md	/^#### Type()$/;"	t	section:types.Object
WrappedIn	dist/artifacts.json	/^[{"name":"metadata.json","path":"dist\/metadata.json","internal_type":30,"type":"Metadata"},{"na/;"	s	object:4.extra
WrappedIn	dist/artifacts.json	/^[{"name":"metadata.json","path":"dist\/metadata.json","internal_type":30,"type":"Metadata"},{"na/;"	s	object:5.extra
WrappedIn	dist/artifacts.json	/^[{"name":"metadata.json","path":"dist\/metadata.json","internal_type":30,"type":"Metadata"},{"na/;"	s	object:6.extra
all	Makefile	/^all:$/;"	t
all possible entrypoints	docs/entrypoint.md	/^#### all possible entrypoints$/;"	t
all_flag	test_files/makefile_parser/cli_args.go	/^	all_flag     bool$/;"	m	struct:main.cli_args	typeref:typename:bool
another_func	test_files/multifile/third_file.go	/^func another_func() {$/;"	f	package:main
assert_dir	helper.go	/^func assert_dir(dir string) {$/;"	f	package:main
ast.CallExpr	docs/callexpr.md	/^## ast.CallExpr$/;"	s
ast.CallExpr.Fun	docs/callexpr.md	/^## ast.CallExpr.Fun$/;"	s
ast.FuncDecl	docs/funcdecl.md	/^## ast.FuncDecl$/;"	s
bar	test_files/multifile/foo.go	/^func bar() string {$/;"	f	package:main	typeref:typename:string
call_lparen	fcall.go	/^	call_lparen token.Pos$/;"	m	struct:main.fcall	typeref:typename:token.Pos
call_name	fcall.go	/^	call_name   string$/;"	m	struct:main.fcall	typeref:typename:string
callexprs_to_strings	ast_conversions.go	/^func callexprs_to_strings(calls []*ast.CallExpr) []string {$/;"	f	package:main	typeref:typename:[]string
calltree	tree.go	/^func calltree(writer io.Writer, fcalls []fcall, parent_func string, prefix string) {$/;"	f	package:main
clean	Makefile	/^clean:$/;"	t
cli_args	cli_args.go	/^type cli_args struct {$/;"	s	package:main
cli_args	test_files/makefile_parser/cli_args.go	/^type cli_args struct {$/;"	s	package:main
commit	dist/metadata.json	/^{"project_name":"gotracer","tag":"v0.0.1","previous_tag":"","version":"0.0.1","commit":"db563be0/;"	s
concat_string	test_files/example.go	/^func concat_string(one string, two string) string {$/;"	f	package:main	typeref:typename:string
content	test_files/makefile_parser/parse_statement.go	/^	content       string$/;"	m	struct:main.statement	typeref:typename:string
date	dist/metadata.json	/^{"project_name":"gotracer","tag":"v0.0.1","previous_tag":"","version":"0.0.1","commit":"db563be0/;"	s
entrypoint	cli_args.go	/^	entrypoint       string$/;"	m	struct:main.cli_args	typeref:typename:string
evaluate	cli_args.go	/^func (args cli_args) evaluate() {$/;"	f	struct:main.cli_args
evaluate	test_files/makefile_parser/cli_args.go	/^func (args cli_args) evaluate() error {$/;"	f	struct:main.cli_args	typeref:typename:error
extra	dist/artifacts.json	/^[{"name":"metadata.json","path":"dist\/metadata.json","internal_type":30,"type":"Metadata"},{"na/;"	o	object:1
extra	dist/artifacts.json	/^[{"name":"metadata.json","path":"dist\/metadata.json","internal_type":30,"type":"Metadata"},{"na/;"	o	object:2
extra	dist/artifacts.json	/^[{"name":"metadata.json","path":"dist\/metadata.json","internal_type":30,"type":"Metadata"},{"na/;"	o	object:3
extra	dist/artifacts.json	/^[{"name":"metadata.json","path":"dist\/metadata.json","internal_type":30,"type":"Metadata"},{"na/;"	o	object:4
extra	dist/artifacts.json	/^[{"name":"metadata.json","path":"dist\/metadata.json","internal_type":30,"type":"Metadata"},{"na/;"	o	object:5
extra	dist/artifacts.json	/^[{"name":"metadata.json","path":"dist\/metadata.json","internal_type":30,"type":"Metadata"},{"na/;"	o	object:6
extra	dist/artifacts.json	/^[{"name":"metadata.json","path":"dist\/metadata.json","internal_type":30,"type":"Metadata"},{"na/;"	o	object:7
fcall	fcall.go	/^type fcall struct {$/;"	s	package:main
fd	fcall.go	/^	fd          *ast.FuncDecl$/;"	m	struct:main.fcall	typeref:typename:*ast.FuncDecl
fds	func_center.go	/^	fds []ast.FuncDecl$/;"	m	struct:main.func_center	typeref:typename:[]ast.FuncDecl
file_path	test_files/makefile_parser/cli_args.go	/^	file_path    string$/;"	m	struct:main.cli_args	typeref:typename:string
file_to_string	test_files/makefile_parser/file_helper.go	/^func file_to_string(file_path string) string {$/;"	f	package:main	typeref:typename:string
file_to_string_slice	test_files/makefile_parser/file_helper.go	/^func file_to_string_slice(file_path string) []string {$/;"	f	package:main	typeref:typename:[]string
filetree	tree.go	/^func filetree(fset *token.FileSet, af ast.File) {$/;"	f	package:main
filter_calls	ast_conversions.go	/^func filter_calls(calls []*ast.CallExpr, afs []ast.File) []*ast.CallExpr {$/;"	f	package:main	typeref:typename:[]*ast.CallExpr
find_makefiles	test_files/makefile_parser/search_makefiles.go	/^func find_makefiles(dir_path string) []string {$/;"	f	package:main	typeref:typename:[]string
foo	test_files/make_append/foo.go	/^func foo() []string {$/;"	f	package:main	typeref:typename:[]string
foo	test_files/mixed_packages/foo.go	/^func foo() {$/;"	f	package:foo
foo	test_files/mixed_packages/foo.go	/^package foo$/;"	p
foo	test_files/multifile/foo.go	/^func foo() {$/;"	f	package:main
foo	test_files/recursion/rec.go	/^func foo() {$/;"	f	package:main
foobar	test_files/example.go	/^func foobar() {$/;"	f	package:main
func_center	func_center.go	/^type func_center struct {$/;"	s	package:main
func_defs	func_center.go	/^	func_defs map[*ast.Ident]types.Object$/;"	m	struct:main.func_center	typeref:typename:map[*ast.Ident]types.Object
func_uses	func_center.go	/^	func_uses map[*ast.Ident]types.Object$/;"	m	struct:main.func_center	typeref:typename:map[*ast.Ident]types.Object
get_all_fds	ast_helper.go	/^func get_all_fds(afs []ast.File) []ast.FuncDecl {$/;"	f	package:main	typeref:typename:[]ast.FuncDecl
get_builtin_funcs	ast_conversions.go	/^func get_builtin_funcs() []string {$/;"	f	package:main	typeref:typename:[]string
get_calls	ast_conversions.go	/^func get_calls(fn *ast.FuncDecl) []*ast.CallExpr {$/;"	f	package:main	typeref:typename:[]*ast.CallExpr
get_calls	fcall.go	/^func (func_call fcall) get_calls() []*ast.CallExpr {$/;"	f	struct:main.fcall	typeref:typename:[]*ast.CallExpr
get_calls_from_afps	calls.go	/^func get_calls_from_afps(afps []*ast.File) ([]*ast.CallExpr, error) {$/;"	f	package:main	typeref:typename:([]*ast.CallExpr, error)
get_calls_from_node	ast_conversions.go	/^func get_calls_from_node(node ast.Node) []*ast.CallExpr {$/;"	f	package:main	typeref:typename:[]*ast.CallExpr
get_children	fcall.go	/^func (func_call fcall) get_children(all_fcalls []fcall) []fcall {$/;"	f	struct:main.fcall	typeref:typename:[]fcall
get_cli_args	cli_args.go	/^func get_cli_args() cli_args {$/;"	f	package:main	typeref:typename:cli_args
get_core	convenience.go	/^func get_core(i interface{}) string {$/;"	f	package:main	typeref:typename:string
get_fcall_from_slice	fcall.go	/^func get_fcall_from_slice(fcalls []fcall, name string) (fcall, error) {$/;"	f	package:main	typeref:typename:(fcall, error)
get_fcalls	func_center.go	/^func (fc func_center) get_fcalls() ([]fcall, error) {$/;"	f	struct:main.func_center	typeref:typename:([]fcall, error)
get_fd_from_fname	ast_conversions.go	/^func get_fd_from_fname(fds []ast.FuncDecl, fname string) *ast.FuncDecl {$/;"	f	package:main	typeref:typename:*ast.FuncDecl
get_fd_from_pos	ast_conversions.go	/^func get_fd_from_pos(fds []ast.FuncDecl, namepos token.Pos) (*ast.FuncDecl, error) {$/;"	f	package:main	typeref:typename:(*ast.FuncDecl, error)
get_fds_from_afps	ast_helper.go	/^func get_fds_from_afps(afs []*ast.File) []ast.FuncDecl {$/;"	f	package:main	typeref:typename:[]ast.FuncDecl
get_fname_from_call	ast_conversions.go	/^func get_fname_from_call(node ast.Node) string {$/;"	f	package:main	typeref:typename:string
get_func_info	type_checking.go	/^func get_func_info(fset *token.FileSet, afps []*ast.File) (map[*ast.Ident]types.Object, map[*ast/;"	f	package:main	typeref:typename:(map[*ast.Ident]types.Object, map[*ast.Ident]types.Object, error)
get_funcdecl	func_center.go	/^func (fc func_center) get_funcdecl(call *ast.CallExpr) (*ast.FuncDecl, error) {$/;"	f	struct:main.func_center	typeref:typename:(*ast.FuncDecl, error)
get_funcdecl_from_fname	ast_conversions.go	/^func get_funcdecl_from_fname(src ast.Node, fname string) *ast.FuncDecl {$/;"	f	package:main	typeref:typename:*ast.FuncDecl
get_funcdecl_from_fname_multifile	ast_conversions.go	/^func get_funcdecl_from_fname_multifile(ast_files []ast.File, fname string) *ast.FuncDecl {$/;"	f	package:main	typeref:typename:*ast.FuncDecl
get_funcdecls_from_afs	convenience.go	/^func get_funcdecls_from_afs(afs []ast.File) []*ast.FuncDecl {$/;"	f	package:main	typeref:typename:[]*ast.FuncDecl
get_gofiles	helper.go	/^func get_gofiles(dir string) []string {$/;"	f	package:main	typeref:typename:[]string
get_local_calls_from_node	ast_conversions.go	/^func get_local_calls_from_node(node ast.Node) []*ast.CallExpr {$/;"	f	package:main	typeref:typename:[]*ast.CallExpr
get_possible_entrypoints	entrypoints.go	/^func get_possible_entrypoints(fset *token.FileSet, afps []*ast.File) string {$/;"	f	package:main	typeref:typename:string
get_receiver	ast_helper.go	/^func get_receiver(recv_types string) string {$/;"	f	package:main	typeref:typename:string
get_special_targets	test_files/makefile_parser/process_makefile.go	/^func get_special_targets() []string {$/;"	f	package:main	typeref:typename:[]string
get_string_from_fake_string	ast_conversions.go	/^func get_string_from_fake_string(any interface{}) string {$/;"	f	package:main	typeref:typename:string
get_tree_string	type_checking.go	/^func get_tree_string(obj types.Object) string {$/;"	f	package:main	typeref:typename:string
get_type_info	type_checking.go	/^func get_type_info(fset *token.FileSet, afs []*ast.File) (*types.Info, error) {$/;"	f	package:main	typeref:typename:(*types.Info, error)
go_dir	cli_args.go	/^	go_dir           string$/;"	m	struct:main.cli_args	typeref:typename:string
goamd64	dist/artifacts.json	/^[{"name":"metadata.json","path":"dist\/metadata.json","internal_type":30,"type":"Metadata"},{"na/;"	s	object:1
goamd64	dist/artifacts.json	/^[{"name":"metadata.json","path":"dist\/metadata.json","internal_type":30,"type":"Metadata"},{"na/;"	s	object:6
goarch	dist/artifacts.json	/^[{"name":"metadata.json","path":"dist\/metadata.json","internal_type":30,"type":"Metadata"},{"na/;"	s	object:1
goarch	dist/artifacts.json	/^[{"name":"metadata.json","path":"dist\/metadata.json","internal_type":30,"type":"Metadata"},{"na/;"	s	object:2
goarch	dist/artifacts.json	/^[{"name":"metadata.json","path":"dist\/metadata.json","internal_type":30,"type":"Metadata"},{"na/;"	s	object:3
goarch	dist/artifacts.json	/^[{"name":"metadata.json","path":"dist\/metadata.json","internal_type":30,"type":"Metadata"},{"na/;"	s	object:4
goarch	dist/artifacts.json	/^[{"name":"metadata.json","path":"dist\/metadata.json","internal_type":30,"type":"Metadata"},{"na/;"	s	object:5
goarch	dist/artifacts.json	/^[{"name":"metadata.json","path":"dist\/metadata.json","internal_type":30,"type":"Metadata"},{"na/;"	s	object:6
goarch	dist/metadata.json	/^{"project_name":"gotracer","tag":"v0.0.1","previous_tag":"","version":"0.0.1","commit":"db563be0/;"	s	object:runtime
goos	dist/artifacts.json	/^[{"name":"metadata.json","path":"dist\/metadata.json","internal_type":30,"type":"Metadata"},{"na/;"	s	object:1
goos	dist/artifacts.json	/^[{"name":"metadata.json","path":"dist\/metadata.json","internal_type":30,"type":"Metadata"},{"na/;"	s	object:2
goos	dist/artifacts.json	/^[{"name":"metadata.json","path":"dist\/metadata.json","internal_type":30,"type":"Metadata"},{"na/;"	s	object:3
goos	dist/artifacts.json	/^[{"name":"metadata.json","path":"dist\/metadata.json","internal_type":30,"type":"Metadata"},{"na/;"	s	object:4
goos	dist/artifacts.json	/^[{"name":"metadata.json","path":"dist\/metadata.json","internal_type":30,"type":"Metadata"},{"na/;"	s	object:5
goos	dist/artifacts.json	/^[{"name":"metadata.json","path":"dist\/metadata.json","internal_type":30,"type":"Metadata"},{"na/;"	s	object:6
goos	dist/metadata.json	/^{"project_name":"gotracer","tag":"v0.0.1","previous_tag":"","version":"0.0.1","commit":"db563be0/;"	s	object:runtime
gotracer	README.md	/^# gotracer$/;"	c
has_relevant_target	test_files/makefile_parser/process_makefile.go	/^func has_relevant_target(unfolded_line string, all_flag bool) bool {$/;"	f	package:main	typeref:typename:bool
has_target	test_files/makefile_parser/parse_statement.go	/^	has_target    bool$/;"	m	struct:main.statement	typeref:typename:bool
install	Makefile	/^install:$/;"	t
internal_type	dist/artifacts.json	/^[{"name":"metadata.json","path":"dist\/metadata.json","internal_type":30,"type":"Metadata"},{"na/;"	n	object:0
internal_type	dist/artifacts.json	/^[{"name":"metadata.json","path":"dist\/metadata.json","internal_type":30,"type":"Metadata"},{"na/;"	n	object:1
internal_type	dist/artifacts.json	/^[{"name":"metadata.json","path":"dist\/metadata.json","internal_type":30,"type":"Metadata"},{"na/;"	n	object:2
internal_type	dist/artifacts.json	/^[{"name":"metadata.json","path":"dist\/metadata.json","internal_type":30,"type":"Metadata"},{"na/;"	n	object:3
internal_type	dist/artifacts.json	/^[{"name":"metadata.json","path":"dist\/metadata.json","internal_type":30,"type":"Metadata"},{"na/;"	n	object:4
internal_type	dist/artifacts.json	/^[{"name":"metadata.json","path":"dist\/metadata.json","internal_type":30,"type":"Metadata"},{"na/;"	n	object:5
internal_type	dist/artifacts.json	/^[{"name":"metadata.json","path":"dist\/metadata.json","internal_type":30,"type":"Metadata"},{"na/;"	n	object:6
internal_type	dist/artifacts.json	/^[{"name":"metadata.json","path":"dist\/metadata.json","internal_type":30,"type":"Metadata"},{"na/;"	n	object:7
is_assignment	test_files/makefile_parser/parse_statement.go	/^	is_assignment bool$/;"	m	struct:main.statement	typeref:typename:bool
is_flag_passed	test_files/makefile_parser/cli_args.go	/^func is_flag_passed(flag_name string) bool {$/;"	f	package:main	typeref:typename:bool
is_funcdecl	ast_conversions.go	/^func is_funcdecl(ast_files []ast.File, fname string) bool {$/;"	f	package:main	typeref:typename:bool
is_method	fcall.go	/^	is_method   bool$/;"	m	struct:main.fcall	typeref:typename:bool
is_method	funcdecl_helper.go	/^func is_method(fd ast.FuncDecl) bool {$/;"	f	package:main	typeref:typename:bool
is_recipe	test_files/makefile_parser/parse_statement.go	/^	is_recipe     bool$/;"	m	struct:main.statement	typeref:typename:bool
is_selectorstr	ast_helper.go	/^func is_selectorstr(call string) bool {$/;"	f	package:main	typeref:typename:bool
key.End()	docs/types_info.md	/^#### key.End()$/;"	t	section:types.Info.Uses Map
key.Pos()	docs/types_info.md	/^#### key.Pos()$/;"	t	section:types.Info.Uses Map
list_entrypoints	cli_args.go	/^	list_entrypoints bool$/;"	m	struct:main.cli_args	typeref:typename:bool
main	ast_conversions.go	/^package main$/;"	p
main	ast_conversions_test.go	/^package main$/;"	p
main	ast_helper.go	/^package main$/;"	p
main	ast_helper_test.go	/^package main$/;"	p
main	calls.go	/^package main$/;"	p
main	calls_test.go	/^package main$/;"	p
main	cli_args.go	/^package main$/;"	p
main	convenience.go	/^package main$/;"	p
main	convenience_test.go	/^package main$/;"	p
main	entrypoints.go	/^package main$/;"	p
main	entrypoints_test.go	/^package main$/;"	p
main	fcall.go	/^package main$/;"	p
main	fcall_test.go	/^package main$/;"	p
main	func_center.go	/^package main$/;"	p
main	func_center_test.go	/^package main$/;"	p
main	funcdecl_helper.go	/^package main$/;"	p
main	helper.go	/^package main$/;"	p
main	helper_test.go	/^package main$/;"	p
main	main.go	/^func main() {$/;"	f	package:main
main	main.go	/^package main$/;"	p
main	parsing.go	/^package main$/;"	p
main	parsing_test.go	/^package main$/;"	p
main	test_files/example.go	/^func main() {$/;"	f	package:main
main	test_files/example.go	/^package main$/;"	p
main	test_files/make_append/foo.go	/^package main$/;"	p
main	test_files/make_append/main.go	/^func main() {$/;"	f	package:main
main	test_files/make_append/main.go	/^package main$/;"	p
main	test_files/makefile_parser/cli_args.go	/^package main$/;"	p
main	test_files/makefile_parser/file_helper.go	/^package main$/;"	p
main	test_files/makefile_parser/main.go	/^func main() {$/;"	f	package:main
main	test_files/makefile_parser/main.go	/^package main$/;"	p
main	test_files/makefile_parser/parse_statement.go	/^package main$/;"	p
main	test_files/makefile_parser/process_makefile.go	/^package main$/;"	p
main	test_files/makefile_parser/search_makefiles.go	/^package main$/;"	p
main	test_files/mixed_packages/main.go	/^func main() {$/;"	f	package:main
main	test_files/mixed_packages/main.go	/^package main$/;"	p
main	test_files/multifile/foo.go	/^package main$/;"	p
main	test_files/multifile/foo_test.go	/^package main$/;"	p
main	test_files/multifile/main.go	/^func main() {$/;"	f	package:main
main	test_files/multifile/main.go	/^package main$/;"	p
main	test_files/multifile/third_file.go	/^package main$/;"	p
main	test_files/parser_error/main.go	/^func main() {$/;"	f
main	test_files/recursion/main.go	/^func main() {$/;"	f	package:main
main	test_files/recursion/main.go	/^package main$/;"	p
main	test_files/recursion/rec.go	/^package main$/;"	p
main	tree.go	/^package main$/;"	p
main	tree_test.go	/^package main$/;"	p
main	type_checking.go	/^package main$/;"	p
main	type_checking_test.go	/^package main$/;"	p
main function	docs/types_info.md	/^#### main function$/;"	t	section:types.Info.Uses Map
makefile	test_files/makefile_parser/process_makefile.go	/^type makefile struct {$/;"	s	package:main
name	dist/artifacts.json	/^[{"name":"metadata.json","path":"dist\/metadata.json","internal_type":30,"type":"Metadata"},{"na/;"	s	object:0
name	dist/artifacts.json	/^[{"name":"metadata.json","path":"dist\/metadata.json","internal_type":30,"type":"Metadata"},{"na/;"	s	object:1
name	dist/artifacts.json	/^[{"name":"metadata.json","path":"dist\/metadata.json","internal_type":30,"type":"Metadata"},{"na/;"	s	object:2
name	dist/artifacts.json	/^[{"name":"metadata.json","path":"dist\/metadata.json","internal_type":30,"type":"Metadata"},{"na/;"	s	object:3
name	dist/artifacts.json	/^[{"name":"metadata.json","path":"dist\/metadata.json","internal_type":30,"type":"Metadata"},{"na/;"	s	object:4
name	dist/artifacts.json	/^[{"name":"metadata.json","path":"dist\/metadata.json","internal_type":30,"type":"Metadata"},{"na/;"	s	object:5
name	dist/artifacts.json	/^[{"name":"metadata.json","path":"dist\/metadata.json","internal_type":30,"type":"Metadata"},{"na/;"	s	object:6
name	dist/artifacts.json	/^[{"name":"metadata.json","path":"dist\/metadata.json","internal_type":30,"type":"Metadata"},{"na/;"	s	object:7
new_func_center	func_center.go	/^func new_func_center(fset *token.FileSet, afps []*ast.File) (func_center, error) {$/;"	f	package:main	typeref:typename:(func_center, error)
new_statement	test_files/makefile_parser/parse_statement.go	/^func new_statement() statement {$/;"	f	package:main	typeref:typename:statement
node_to_string	ast_helper.go	/^func node_to_string(node ast.Node, fset *token.FileSet) string {$/;"	f	package:main	typeref:typename:string
parse	test_files/makefile_parser/parse_statement.go	/^func (sm *statement) parse() {$/;"	f	struct:main.statement
parse_cli_args	test_files/makefile_parser/cli_args.go	/^func parse_cli_args() cli_args {$/;"	f	package:main	typeref:typename:cli_args
parse_dir	parsing.go	/^func parse_dir(go_dir string) ([]ast.File, *token.FileSet, error) {$/;"	f	package:main	typeref:typename:([]ast.File, *token.FileSet, error)
parse_dir_afps	parsing.go	/^func parse_dir_afps(go_dir string) ([]*ast.File, *token.FileSet, error) {$/;"	f	package:main	typeref:typename:([]*ast.File, *token.FileSet, error)
parse_makefile	test_files/makefile_parser/process_makefile.go	/^func parse_makefile(args cli_args) makefile {$/;"	f	package:main	typeref:typename:makefile
path	dist/artifacts.json	/^[{"name":"metadata.json","path":"dist\/metadata.json","internal_type":30,"type":"Metadata"},{"na/;"	s	object:0
path	dist/artifacts.json	/^[{"name":"metadata.json","path":"dist\/metadata.json","internal_type":30,"type":"Metadata"},{"na/;"	s	object:1
path	dist/artifacts.json	/^[{"name":"metadata.json","path":"dist\/metadata.json","internal_type":30,"type":"Metadata"},{"na/;"	s	object:2
path	dist/artifacts.json	/^[{"name":"metadata.json","path":"dist\/metadata.json","internal_type":30,"type":"Metadata"},{"na/;"	s	object:3
path	dist/artifacts.json	/^[{"name":"metadata.json","path":"dist\/metadata.json","internal_type":30,"type":"Metadata"},{"na/;"	s	object:4
path	dist/artifacts.json	/^[{"name":"metadata.json","path":"dist\/metadata.json","internal_type":30,"type":"Metadata"},{"na/;"	s	object:5
path	dist/artifacts.json	/^[{"name":"metadata.json","path":"dist\/metadata.json","internal_type":30,"type":"Metadata"},{"na/;"	s	object:6
path	dist/artifacts.json	/^[{"name":"metadata.json","path":"dist\/metadata.json","internal_type":30,"type":"Metadata"},{"na/;"	s	object:7
path	test_files/makefile_parser/process_makefile.go	/^	path    string$/;"	m	struct:main.makefile	typeref:typename:string
performance	README.md	/^#### performance$/;"	t	section:gotracer""usage
position matching (TLDR)	docs/funcdecl.md	/^#### position matching (TLDR)$/;"	t	section:ast.FuncDecl
pretty_print_makefiles	test_files/makefile_parser/search_makefiles.go	/^func pretty_print_makefiles(files []string, args cli_args) {$/;"	f	package:main
previous_tag	dist/metadata.json	/^{"project_name":"gotracer","tag":"v0.0.1","previous_tag":"","version":"0.0.1","commit":"db563be0/;"	s
print_struct	convenience.go	/^func print_struct(any interface{}) string {$/;"	f	package:main	typeref:typename:string
project_name	dist/metadata.json	/^{"project_name":"gotracer","tag":"v0.0.1","previous_tag":"","version":"0.0.1","commit":"db563be0/;"	s
read_statement	test_files/makefile_parser/parse_statement.go	/^func (sm *statement) read_statement(remaining_content *string) error {$/;"	f	struct:main.statement	typeref:typename:error
rec_func	test_files/recursion/rec.go	/^func rec_func(bar string) {$/;"	f	package:main
recipeprefix	test_files/makefile_parser/parse_statement.go	/^	recipeprefix  rune$/;"	m	struct:main.statement	typeref:typename:rune
remove_comment	test_files/makefile_parser/parse_statement.go	/^func (sm *statement) remove_comment() {$/;"	f	struct:main.statement
runtime	dist/metadata.json	/^{"project_name":"gotracer","tag":"v0.0.1","previous_tag":"","version":"0.0.1","commit":"db563be0/;"	o
search_flag	test_files/makefile_parser/cli_args.go	/^	search_flag  bool$/;"	m	struct:main.cli_args	typeref:typename:bool
search_result	test_files/makefile_parser/search_makefiles.go	/^func search_result(args cli_args) {$/;"	f	package:main
second_foo	test_files/make_append/foo.go	/^func second_foo() {$/;"	f	package:main
second_foo	test_files/multifile/foo.go	/^func second_foo() {$/;"	f	package:main
silent_calltree	tree.go	/^func silent_calltree(fset *token.FileSet, afps []*ast.File) (string, error) {$/;"	f	package:main	typeref:typename:(string, error)
silent_dirtree	tree.go	/^func silent_dirtree(fset *token.FileSet, afs []ast.File) string {$/;"	f	package:main	typeref:typename:string
silent_filetree	tree.go	/^func silent_filetree(fset *token.FileSet, af ast.File) string {$/;"	f	package:main	typeref:typename:string
single_file_result	test_files/makefile_parser/process_makefile.go	/^func single_file_result(args cli_args) error {$/;"	f	package:main	typeref:typename:error
split_selectorstr	ast_helper.go	/^func split_selectorstr(call string) []string {$/;"	f	package:main	typeref:typename:[]string
statement	test_files/makefile_parser/parse_statement.go	/^type statement struct {$/;"	s	package:main
string_to_ast	convenience.go	/^func string_to_ast(src string) (*ast.File, *token.FileSet) {$/;"	f	package:main	typeref:typename:(*ast.File, *token.FileSet)
strings_to_ast	convenience.go	/^func strings_to_ast(srcs []string) ([]ast.File, *token.FileSet) {$/;"	f	package:main	typeref:typename:([]ast.File, *token.FileSet)
strmap_to_afs	convenience.go	/^func strmap_to_afs(srcs map[string]string) ([]ast.File, *token.FileSet, error) {$/;"	f	package:main	typeref:typename:([]ast.File, *token.FileSet, error)
strmap_to_ast	convenience.go	/^func strmap_to_ast(srcs map[string]string) ([]*ast.File, *token.FileSet, error) {$/;"	f	package:main	typeref:typename:([]*ast.File, *token.FileSet, error)
tag	dist/metadata.json	/^{"project_name":"gotracer","tag":"v0.0.1","previous_tag":"","version":"0.0.1","commit":"db563be0/;"	s
targets	test_files/makefile_parser/process_makefile.go	/^	targets []string$/;"	m	struct:main.makefile	typeref:typename:[]string
test	Makefile	/^test:$/;"	t
tree	tree.go	/^func tree(writer io.Writer, parent_func string, afs []ast.File, prefix string) {$/;"	f	package:main
type	dist/artifacts.json	/^[{"name":"metadata.json","path":"dist\/metadata.json","internal_type":30,"type":"Metadata"},{"na/;"	s	object:0
type	dist/artifacts.json	/^[{"name":"metadata.json","path":"dist\/metadata.json","internal_type":30,"type":"Metadata"},{"na/;"	s	object:1
type	dist/artifacts.json	/^[{"name":"metadata.json","path":"dist\/metadata.json","internal_type":30,"type":"Metadata"},{"na/;"	s	object:2
type	dist/artifacts.json	/^[{"name":"metadata.json","path":"dist\/metadata.json","internal_type":30,"type":"Metadata"},{"na/;"	s	object:3
type	dist/artifacts.json	/^[{"name":"metadata.json","path":"dist\/metadata.json","internal_type":30,"type":"Metadata"},{"na/;"	s	object:4
type	dist/artifacts.json	/^[{"name":"metadata.json","path":"dist\/metadata.json","internal_type":30,"type":"Metadata"},{"na/;"	s	object:5
type	dist/artifacts.json	/^[{"name":"metadata.json","path":"dist\/metadata.json","internal_type":30,"type":"Metadata"},{"na/;"	s	object:6
type	dist/artifacts.json	/^[{"name":"metadata.json","path":"dist\/metadata.json","internal_type":30,"type":"Metadata"},{"na/;"	s	object:7
types.Info.Uses Map	docs/types_info.md	/^## types.Info.Uses Map$/;"	s
types.Object	docs/types_object.md	/^## types.Object$/;"	s
unmask_var	convenience.go	/^func unmask_var(i interface{}) {$/;"	f	package:main
unused_func	test_files/multifile/third_file.go	/^func unused_func() {$/;"	f	package:main
usage	README.md	/^## usage$/;"	s	chapter:gotracer
uses_key	fcall.go	/^	uses_key    *ast.Ident$/;"	m	struct:main.fcall	typeref:typename:*ast.Ident
uses_value	fcall.go	/^	uses_value  types.Object$/;"	m	struct:main.fcall	typeref:typename:types.Object
value.End()	docs/types_info.md	/^#### value.End()$/;"	t	section:types.Info.Uses Map
value.Pos()	docs/types_info.md	/^#### value.Pos()$/;"	t	section:types.Info.Uses Map
verbose_calltree	tree.go	/^func verbose_calltree(fset *token.FileSet, afps []*ast.File, entrypoint string) {$/;"	f	package:main
verbose_dirtree	tree.go	/^func verbose_dirtree(fset *token.FileSet, afs []ast.File) {$/;"	f	package:main
verbose_flag	test_files/makefile_parser/cli_args.go	/^	verbose_flag bool$/;"	m	struct:main.cli_args	typeref:typename:bool
version	dist/metadata.json	/^{"project_name":"gotracer","tag":"v0.0.1","previous_tag":"","version":"0.0.1","commit":"db563be0/;"	s
